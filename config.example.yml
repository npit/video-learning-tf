run:
  # save / load configuration
  resume_file: 
  # folder to store run data
  run_folder:  /path/to/runfolder
  phase : defs.phase.train
  # phase : defs.phase.val

  # data parameters; #a list of input data 
  data:
    dataset1-train:
      data_path: /path/to/pathlabels.txt
      prepend_folder: ""
      raw_image_shape: (240, 320, 3)
      image_shape: (227, 227, 3)
      mean_image: [99.197148 ,105.293620 ,109.503945 ]
      data_format: defs.data_format.tfrecord
      frame_format: "jpg"
      imgproc: [defs.imgproc.rand_crop, defs.imgproc.rand_mirror, defs.imgproc.sub_mean]
      batch_item: defs.batch_item.default
      phase: defs.phase.train
      tag: defs.dataset_tag.main
    dataset1-test:
      data_path: /media/npittaras/SAMSUNG/Data/msc-thesis/ccv/serialized/frames_test/test.existing.txt
      prepend_folder: ""
      raw_image_shape: (240, 320, 3)
      image_shape: (227, 227, 3)
      mean_image: [99.197148 ,105.293620 ,109.503945 ]
      data_format: defs.data_format.tfrecord
      frame_format: "jpg"
      imgproc: [defs.imgproc.center_crop, defs.imgproc.sub_mean]
      batch_item: defs.batch_item.default
      phase: defs.phase.val
      tag: defs.dataset_tag.main


  network:
    num_classes : 20
    pipelines:
      - frames:
          input: defs.dataset_tag.main
          representation: defs.representation.dcnn
          load_weights: models/alexnet/bvlc_alexnet.npy
          frame_encoding_layer: "fc7"
          #input_shape: (227, 227,3)
      - spectros:
          input: defs.dataset_tag.aux
          representation: defs.representation.dcnn
          load_weights: models/alexnet/bvlc_alexnet.npy
          frame_encoding_layer: "fc7"
          #input_shape: (227, 227,3)
          frame_fusion: [defs.fusion_type.early, defs.fusion_method.avg]
      - ibias:
          input: [frames, spectros]
          representation: defs.representation.nop
          classifier: defs.classifier.lstm
          lstm_params: [500, 2, defs.fusion_method.avg, defs.combo.ibias]

  # phase settings
  train:
    # training settings
    batch_size: 20
    epochs : 10
    optimizer : defs.optim.sgd
    #momentum: 0.9
    base_lr: 0.05
    lr_mult : None
    lr_decay : [ defs.decay.exp, defs.periodicity.drops, 100, 0.96 ]
    #clip_grads : (-1.,1.)
    clip_grads : None
    clip_norm : 10
    #clip_grads : None
    dropout_keep_prob : 0.5

  val:
    # validation settings
    batch_size: 2
    logits_save_interval : -1
    clip_fusion : [defs.fusion_type.late, defs.fusion_method.avg]

  logging:
    # logging
    save_freq_per_epoch : 1
    level : logging.DEBUG
    print_tensors : False
    tensorboard_folder : "tensorboard"
    # only gmail support
    email_notify: [sender@gmail.com, recipient@gmail.com] 



  # imgdesc vars
  captioning:
    caption_search : defs.caption_search.max
    eval_type : defs.eval_type.coco
    caption_ground_truth : "path/to/caption/gt"
    word_embeddings_file : "path/to/embeddings"

serialize:

  # path to prepend to each image path
  path_prepend_folder: "path/to/images/folder"

  # video / image list to serialize
  input_files: [ "/path/to/imgfile1", "/path/to/imgfile2"]

  # run type
  do_shuffle: True
  do_serialize: True
  do_validate: True
  validate_pcnt: 10
  num_threads: 2
  num_items_per_thread: 20
  run_id: None

  output_folder: "path/to/output/folder/" 
  generation_error: defs.generation_error.compromise

  # video frames generation parameters 
  clip_offset_or_num: 2
  num_frames_per_clip: 16
  raw_image_shape: (240,320,3)
  clipframe_mode: defs.clipframe_mode.iterative
  frame_format: "jpg"

captions:
  # vocabulary to encode captions or produce embeddings.Set to None to generate.
  vocabulary_file: None
  # caption files to encode or to generate vocabulary
  caption_files:  ["/path/to/captionfile1","/path/to/captionfile2"]
  caption_file_formats: ["coco","flickr"]
  vocab_replacement_file: None
  word_count_thresh: 5
  caption_max_length: 50
  randomize_missing_embeddings: False

  # embedding generation files
  embeddings_file: "/path/to/embedding/matrix"
  embeddings_file_type: "glove"
