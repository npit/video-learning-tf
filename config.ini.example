[run]
# run type and an identifier for it
workflow = defs.workflows.singleframe
run_id = None

# save / load configuration
resume_file = None
run_folder = "path/to/runfolder"
path_prepend_folder = ""
word_embeddings_file = "path/to/word/embeddings"

# architecture settings
frame_encoding_layer = "fc7"
lstm_num_hidden = 256
frame_pooling_type = defs.pooling.avg
clip_pooling_type = defs.pooling.avg
num_classes = 101
mean_image = [103.939, 116.779, 123.68]

# data input format
raw_image_shape = (240, 320, 3)
image_shape = (227, 227, 3)
data_format = defs.data_format.tfrecord
frame_format = "jpg"
input_mode = defs.input_mode.image

# batch settings
num_frames_per_clip = 16
batch_item = defs.batch_item.default


# training settings
do_training = True
do_random_mirroring = True
do_random_cropping = True
batch_size_train = 100
epochs = 15
optimizer = defs.optim.sgd
base_lr= 0.001
lr_mult = 2
lr_decay = ( defs.decay.exp, 1000, 0.96)
clip_grads = None


# validation settings
do_validation = False
validation_interval = 1
batch_size_val = 88

dropout_keep_prob = 0.5

# logging
logging_level = logging.DEBUG
tensorboard_folder = "tensorboard_graphs"

[serialize]

# path to prepend to each image path
path_prepend_folder = "path/to/images/folder"

# video / image list to serialize
input_files = [ "/path/to/imgfile1", "/path/to/imgfile2"]

# run type
do_shuffle = True
do_serialize = True
do_validate = True
validate_pcnt = 10
num_threads = 2
num_items_per_thread = 20

# video frames generation parameters 
clip_offset_or_num = 2
num_frames_per_clip = 16
raw_image_shape = (240,320,3)
clipframe_mode = defs.clipframe_mode.iterative
frame_format = "jpg"

[captions]
# vocabulary to encode captions or produce embeddings.Set to None to generate.
vocabulary_file = None
# caption files to encode or to generate vocabulary
caption_files =  ["/path/to/captionfile1","/path/to/captionfile2"]
caption_file_formats = ["coco","flickr"]
vocab_replacement_file= None
word_count_thresh = 5
caption_max_length = 50
randomize_missing_embeddings = False

# embedding generation files
embeddings_file = "/path/to/embedding/matrix"
embedding_format = "glove"
